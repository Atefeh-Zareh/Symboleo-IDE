///*
// * generated by Xtext 2.25.0
// */
package ca.uottawa.csmlab.symboleo.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
//import ca.uottawa.csmlab.symboleo.symboleo.Model
//import ca.uottawa.csmlab.symboleo.symboleo.Obligation
//import ca.uottawa.csmlab.symboleo.symboleo.Proposition
//import ca.uottawa.csmlab.symboleo.symboleo.Junction
//import ca.uottawa.csmlab.symboleo.symboleo.Negation
//import ca.uottawa.csmlab.symboleo.symboleo.Atom
//import ca.uottawa.csmlab.symboleo.symboleo.EventProp
//import ca.uottawa.csmlab.symboleo.symboleo.SitProp
//import ca.uottawa.csmlab.symboleo.symboleo.oEvent
//import ca.uottawa.csmlab.symboleo.symboleo.cEvent
//import ca.uottawa.csmlab.symboleo.symboleo.pEvent
//import ca.uottawa.csmlab.symboleo.symboleo.oState
//import ca.uottawa.csmlab.symboleo.symboleo.cState
//import ca.uottawa.csmlab.symboleo.symboleo.pState
//import ca.uottawa.csmlab.symboleo.symboleo.SitName
//import ca.uottawa.csmlab.symboleo.symboleo.Point
//import ca.uottawa.csmlab.symboleo.symboleo.Power
//import ca.uottawa.csmlab.symboleo.symboleo.Interval
//import java.util.HashMap
//import ca.uottawa.csmlab.symboleo.symboleo.Regular
//import ca.uottawa.csmlab.symboleo.symboleo.Enumeration
//import ca.uottawa.csmlab.symboleo.symboleo.DomainType
//import ca.uottawa.csmlab.symboleo.symboleo.BasicType
//import ca.uottawa.csmlab.symboleo.symboleo.OntoCType
//import java.util.ArrayList
//import java.util.HashSet
//import java.lang.Math;
//import ca.uottawa.csmlab.symboleo.symboleo.RelativeEventPointBefore
//import ca.uottawa.csmlab.symboleo.symboleo.RelativeEventPointAfter
//import ca.uottawa.csmlab.symboleo.symboleo.RelativeSituationPointBefore
//import ca.uottawa.csmlab.symboleo.symboleo.RelativeSituationPointAfter
//
//import org.eclipse.emf.ecore.resource.Resource
//import org.eclipse.xtext.generator.AbstractGenerator
//import org.eclipse.xtext.generator.IFileSystemAccess2
//import org.eclipse.xtext.generator.IGeneratorContext
//import ca.uottawa.csmlab.symboleo.generator.Ontology.*
//import ca.uottawa.csmlab.symboleo.symboleo.Basic
//import ca.uottawa.csmlab.symboleo.symboleo.OntologyType
//import ca.uottawa.csmlab.symboleo.symboleo.Parameter
//import ca.uottawa.csmlab.symboleo.symboleo.Declaration
//
/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SymboleoGenerator extends AbstractGenerator {
//	
//	
////	def dispatch compileDomainConceptType(DomainType dType, Contract contract, Regular dc) {
//////		res.append(dType.superType.name + "  " + dc.name + "\n")
//////		superTypes.put(dName, dType.superType.name)
////	}
////	
////	def dispatch compileDomainConceptType(OntologyType oType, Contract contract, Regular dc) {
////		switch (oType.name) {
////			case "Asset": contract.addAsset(new Asset(contract, dc.name, dc.attributes))			  				
////			case "Role": contract.addRole(new Role(contract, dc.name, dc.attributes))
////			case "Event": contract.addEvent(new Event(contract, dc.name, dc.attributes))
////		}
////	}
//	
//	def dispatch compileDomainConcept(Regular domainConcept, Contract contract) {
//		regularDomainsConcepts.add(domainConcept)
//	}
//	
//	def dispatch compileDomainConcept(Basic domainConcept, Contract contract) {
//		basicDomainsConcepts.add(domainConcept)
//		
//	}
//	
//	def dispatch compileDomainConcept(Enumeration domainConcept, Contract contract) {
//		enums.add(domainConcept)
//	}
//	
//	def dispatch compileDeclaration(Declaration declaration) {
//		
//	}
//		
//	def compile(Model model) {
//		var res = new StringBuilder()
//		var superTypes = new HashMap<String, String>()
////		var declAttrs = new HashMap<String, ArrayList<KeyValuePair>>()
//		
//		var contract = new Contract(model.getContractName());
//		for (domainConcept : model.domainConcepts) {
//			domainConcept.compileDomainConcept(contract)	
//		}
//		
//		for (parameter : model.parameters) {
//			parameters.add(parameter)
//		}
//		
//		for (declaration : model.declarations) {
//			declaration.compileDeclaration()	
//		}
//		
//		return res.toString()
//	}
//	
//	var enums = new ArrayList<Enumeration>
//	var basicDomainsConcepts = new ArrayList<Basic>
//	var regularDomainsConcepts = new ArrayList<Regular>
//	
//	var parameters = new ArrayList<Parameter>
//
//	def void doGenerateJS(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		for (e : resource.allContents.toIterable.filter(Model)) {
//        fsa.generateFile(
//            e.getContractName() + ".js",
//            compile(e))
//		}
//		
//	}
//	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('test.pl', resource.allContents.filter(Model).head.compile)
//		doGenerateJS(resource, fsa, context)
	}
}
